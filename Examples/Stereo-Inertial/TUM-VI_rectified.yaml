%YAML:1.0

File.version: "1.0"

#--------------------------------------------------------------------------------------------
# Viewer Parameters
#--------------------------------------------------------------------------------------------
# Viewer.on: 1 is ON, 0 is OFF
Viewer.on: 1

Viewer.KeyFrameSize: 0.05
Viewer.KeyFrameLineWidth: 1.0
Viewer.GraphLineWidth: 0.9
Viewer.PointSize: 2.0
Viewer.CameraSize: 0.08
Viewer.CameraLineWidth: 3.0
Viewer.ViewpointX: 0.0
Viewer.ViewpointY: -0.7
Viewer.ViewpointZ: -3.5
Viewer.ViewpointF: 500.0

#--------------------------------------------------------------------------------------------
# Camera Parameters. Adjust them!
#--------------------------------------------------------------------------------------------

Camera.type: "KannalaBrandt8"
Camera.needRectification: 1  # only with KannalaBrandt8
Camera.fovScale: 0.5         # only with KannalaBrandt8

# Left Camera calibration and distortion parameters (OpenCV)
Camera1.fx: 190.97847715128717
Camera1.fy: 190.9733070521226
Camera1.cx: 254.93170605935475
Camera1.cy: 256.8974428996504

# Kannala-Brandt distortion parameters
Camera1.k1: 0.0034823894022493434
Camera1.k2: 0.0007150348452162257
Camera1.k3: -0.0020532361418706202
Camera1.k4: 0.00020293673591811182

# Right Camera calibration and distortion parameters (OpenCV)
Camera2.fx: 190.44236969414825
Camera2.fy: 190.4344384721956
Camera2.cx: 252.59949716835982
Camera2.cy: 254.91723064636983

# Kannala-Brandt distortion parameters
Camera2.k1: 0.0034003170790442797
Camera2.k2: 0.001766278153469831
Camera2.k3: -0.00266312569781606
Camera2.k4: 0.0003299517423931039

Stereo.b: 0.101

# Transformation matrix from right camera to left camera
Stereo.T_c1_c2: !!opencv-matrix
  rows: 4
  cols: 4
  dt: f
  data: [ 0.999999445773493,   0.000791687752817,   0.000694034010224,   0.101063427414194,
            -0.000823363992158,   0.998899461915674,   0.046895490788700,   0.001946204678584,
            -0.000656143613644,  -0.046896036240590,   0.998899560146304,   0.001015350132563,
          0.0,0.0,0.0,1.0]

# Camera resolution
Camera.width: 512
Camera.height: 512

# Lapping area between images
Camera1.overlappingBegin: 0
Camera1.overlappingEnd: 511

Camera2.overlappingBegin: 0
Camera2.overlappingEnd: 511

# Camera frames per second
Camera.fps: 20

# Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
Camera.RGB: 1

# Close/Far threshold. Baseline times.
Stereo.ThDepth: 40.0

# Transformation from body-frame (imu) to left camera
IMU.T_b_c1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: f
   data: [-0.9995250378696743, 0.0075019185074052044, -0.02989013031643309, 0.045574835649698026, 
          0.029615343885863205, -0.03439736061393144, -0.998969345370175, -0.071161801837997044,
         -0.008522328211654736, -0.9993800792498829, 0.03415885127385616, -0.044681254117144367,
          0.0, 0.0, 0.0, 1.0]

# IMU noise (Use those from VINS-mono)
IMU.NoiseGyro: 0.00016 # 0.004 (VINS) # 0.00016 (TUM) # 0.00016    # rad/s^0.5 
IMU.NoiseAcc: 0.0028 # 0.04 (VINS) # 0.0028 (TUM) # 0.0028     # m/s^1.5
IMU.GyroWalk: 0.000022 # 0.000022 (VINS and TUM) rad/s^1.5
IMU.AccWalk: 0.00086 # 0.0004 (VINS) # 0.00086 # 0.00086    # m/s^2.5
IMU.Frequency: 200.0

#--------------------------------------------------------------------------------------------
# ORB Parameters
#--------------------------------------------------------------------------------------------

# ORB Extractor: Number of features per image
ORBextractor.nFeatures: 1000 # Tested with 1250

# ORB Extractor: Scale factor between levels in the scale pyramid 	
ORBextractor.scaleFactor: 1.2

# ORB Extractor: Number of levels in the scale pyramid	
ORBextractor.nLevels: 8

# ORB Extractor: Fast threshold
# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
# You can lower these values if your images have low contrast			
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 7


#--------------------------------------------------------------------------------------------
# Line Segments Tracking
#--------------------------------------------------------------------------------------------

# Line.on: 1 is ON, 0 is OFF
Line.on: 1

# set to 0 if keeping all lines   
Line.nfeatures: 100
# number of levels in the scale pyramid	
Line.nLevels: 3
# scale factor between levels in the scale pyramid 
Line.scaleFactor: 1.2
# noise standard deviation on line extraction (in pixel)
Line.sigma: 2
# min. line length (relative to img size)
Line.minLineLength: 0.02
# weighting of lines w.r.t. points in success/failure tracking conditions 
Line.lineTrackWeigth: 2
# min. line length 3D (meters)
Line.minLineLength3D: 0.01

# max distance for stereo lines 
Line.Stereo.maxDist: 20

# mu weight for endpoint-endpoint dist in line 3D dist
Line.muWeightForLine3dDist: 0.3

# for using LSD extractor (much slower) instead of EDLine lines extractor
Line.LSD.on: 0

#--------------------------------------------------------------------------------------------
# KeyFrame Generation 
#--------------------------------------------------------------------------------------------

# on: 1 is ON, 0 is OFF
KeyFrame.fovCentersBasedGeneration.on: 0
KeyFrame.maxFovCentersDistance: 0.5

#--------------------------------------------------------------------------------------------
# Sparse Mapping
#--------------------------------------------------------------------------------------------

SparseMapping.filename: "sparse_map_tum_vi_stereoi_rectified.atlas"
# use saved map on start 
SparseMapping.reuseMap: 0  
# save map on shutdown
SparseMapping.saveMap: 0 
# force immediate relocalization (or wait for loop-closing thread for relocalization): 1 is ON, 0 is OFF
SparseMapping.forceRelocalization: 1

#--------------------------------------------------------------------------------------------
# Stereo Dense
#--------------------------------------------------------------------------------------------

# StereoDense.type: libelas, libsgm, opencv, opencvcuda(this needs tuning and improvements) 
# (library used in combination with volumetric mapping to compute depth from stereo images)
StereoDense.type: "libelas"

#--------------------------------------------------------------------------------------------
# PointCloud Mapping
#--------------------------------------------------------------------------------------------

# PointCloudMapping.on: 1 is ON, 0 is OFF
PointCloudMapping.on: 0

#PointCloudMapping.type: voxelgrid, octomap, octree_point, chisel, fastfusion, voxblox
# NOTE: chisel and fastfusion require rectified images if you do not use pointcloud generation 
PointCloudMapping.type: "octree_point"

PointCloudMapping.resolution: 0.02
PointCloudMapping.numKeyframesToQueueBeforeProcessing: 1
PointCloudMapping.downSampleStep: 2
PointCloudMapping.minDepth: 0.2
PointCloudMapping.maxDepth: 8
PointCloudMapping.removeUnstablePoints: 1
PointCloudMapping.resetOnSparseMapChange: 1
PointCloudMapping.cloudDeformationOnSparseMapChange: 0

# [octree_point] specific params
PointCloudMapping.pointCounterThreshold: 2

# [octree_point, chisel, voxblox] specific params 
# PointCloudMapping.useCarving: 1 is ON, 0 is OFF
PointCloudMapping.useCarving: 1

# depth filtering 
PointCloudMapping.filterDepth.on: 1
PointCloudMapping.filterDepth.diameter: 7
PointCloudMapping.filterDepth.sigmaDepth: 0.02
PointCloudMapping.filterDepth.sigmaSpace: 5


