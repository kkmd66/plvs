%YAML:1.0

#--------------------------------------------------------------------------------------------
# System config
#--------------------------------------------------------------------------------------------

# When the variables are commented, the system doesn't load a previous session or not store the current one

# If the LoadFile doesn't exist, the system give a message and create a new Atlas from scratch
#System.LoadAtlasFromFile: "Session_MH01_MH02_MH03_Stereo60_Pseudo"

# The store file is created from the current session, if a file with the same name exists it is deleted
#System.SaveAtlasToFile: "Session_MH01_MH02_MH03_Stereo60_Pseudo"

#--------------------------------------------------------------------------------------------
# Viewer Parameters
#--------------------------------------------------------------------------------------------
# Viewer.on: 1 is ON, 0 is OFF
Viewer.on: 1
Viewer.KeyFrameSize: 0.05
Viewer.KeyFrameLineWidth: 1.0
Viewer.GraphLineWidth: 0.9
Viewer.PointSize: 2.0
Viewer.CameraSize: 0.08
Viewer.CameraLineWidth: 3.0
Viewer.ViewpointX: 0.0
Viewer.ViewpointY: -0.7
Viewer.ViewpointZ: -1.8
Viewer.ViewpointF: 500.0
Viewer.imageViewScale: 1.0

#--------------------------------------------------------------------------------------------
# Camera Parameters. Adjust them!
#--------------------------------------------------------------------------------------------
Camera.type: "PinHole"

# Camera calibration and distortion parameters (OpenCV) (equal for both cameras after stereo rectification)
Camera.fx: 435.2046959714599
Camera.fy: 435.2046959714599
Camera.cx: 367.4517211914062
Camera.cy: 252.2008514404297

Camera.k1: 0.0
Camera.k2: 0.0
Camera.p1: 0.0
Camera.p2: 0.0

Camera.width: 752
Camera.height: 480

# Camera frames per second 
Camera.fps: 20.0

# stereo baseline times fx
Camera.bf: 47.90639384423901

# Color order of the images (0: BGR, 1: RGB. It is ignored if images are grayscale)
Camera.RGB: 1

# Close/Far threshold. Baseline times.
ThDepth: 60.0 # 35

# Transformation from camera 0 to body-frame (imu)
Tbc: !!opencv-matrix
   rows: 4
   cols: 4
   dt: f
   data: [0.0148655429818, -0.999880929698, 0.00414029679422, -0.0216401454975,
         0.999557249008, 0.0149672133247, 0.025715529948, -0.064676986768,
        -0.0257744366974, 0.00375618835797, 0.999660727178, 0.00981073058949,
         0.0, 0.0, 0.0, 1.0]

# IMU noise
IMU.NoiseGyro: 1.7e-04 # 1.6968e-04 
IMU.NoiseAcc: 2.0e-03 # 2.0000e-3
IMU.GyroWalk: 1.9393e-05 
IMU.AccWalk: 3.e-03 # 3.0000e-3
IMU.Frequency: 200

#--------------------------------------------------------------------------------------------
# Stereo Rectification. Only if you need to pre-rectify the images.
# Camera.fx, .fy, etc must be the same as in LEFT.P
#--------------------------------------------------------------------------------------------
LEFT.height: 480
LEFT.width: 752
LEFT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data:[-0.28340811, 0.07395907, 0.00019359, 1.76187114e-05, 0.0]
LEFT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [458.654, 0.0, 367.215, 0.0, 457.296, 248.375, 0.0, 0.0, 1.0]
LEFT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.999966347530033, -0.001422739138722922, 0.008079580483432283, 0.001365741834644127, 0.9999741760894847, 0.007055629199258132, -0.008089410156878961, -0.007044357138835809, 0.9999424675829176]
LEFT.Rf:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: f
   data: [0.999966347530033, -0.001422739138722922, 0.008079580483432283, 0.001365741834644127, 0.9999741760894847, 0.007055629199258132, -0.008089410156878961, -0.007044357138835809, 0.9999424675829176]
LEFT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [435.2046959714599, 0, 367.4517211914062, 0,  0, 435.2046959714599, 252.2008514404297, 0,  0, 0, 1, 0]

RIGHT.height: 480
RIGHT.width: 752
RIGHT.D: !!opencv-matrix
   rows: 1
   cols: 5
   dt: d
   data:[-0.28368365, 0.07451284, -0.00010473, -3.555907e-05, 0.0]
RIGHT.K: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [457.587, 0.0, 379.999, 0.0, 456.134, 255.238, 0.0, 0.0, 1]
RIGHT.R:  !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.9999633526194376, -0.003625811871560086, 0.007755443660172947, 0.003680398547259526, 0.9999684752771629, -0.007035845251224894, -0.007729688520722713, 0.007064130529506649, 0.999945173484644]
RIGHT.P:  !!opencv-matrix
   rows: 3
   cols: 4
   dt: d
   data: [435.2046959714599, 0, 367.4517211914062, -47.90639384423901, 0, 435.2046959714599, 252.2008514404297, 0, 0, 0, 1, 0]

#--------------------------------------------------------------------------------------------
# Features Parameters
#--------------------------------------------------------------------------------------------

# if true ORBextractor.nFeatures will be decreased by Line.nfeatures
Features.balanceTotalNumFeatures: 0

#--------------------------------------------------------------------------------------------
# ORB Parameters
#--------------------------------------------------------------------------------------------

# ORB Extractor: Number of features per image
ORBextractor.nFeatures: 1200

# ORB Extractor: Scale factor between levels in the scale pyramid 	
ORBextractor.scaleFactor: 1.2

# ORB Extractor: Number of levels in the scale pyramid	
ORBextractor.nLevels: 8

# ORB Extractor: Fast threshold
# Image is divided in a grid. At each cell FAST are extracted imposing a minimum response.
# Firstly we impose iniThFAST. If no corners are detected we impose a lower value minThFAST
# You can lower these values if your images have low contrast			
ORBextractor.iniThFAST: 20
ORBextractor.minThFAST: 7



#--------------------------------------------------------------------------------------------
# Line Segments Tracking
#--------------------------------------------------------------------------------------------

# Line.on: 1 is ON, 0 is OFF
Line.on: 1

# set to 0 if keeping all lines   
Line.nfeatures: 100
# number of levels in the scale pyramid	
Line.nLevels: 3
# scale factor between levels in the scale pyramid 
Line.scaleFactor: 1.2
# noise standard deviation on line extraction (in pixel)
Line.sigma: 2
# min. line length (relative to img size)
Line.minLineLength: 0.02
# weighting of lines w.r.t. points in success/failure tracking conditions 
Line.lineTrackWeigth: 2
# min. line length 3D (meters)
Line.minLineLength3D: 0.03

# use same pyramid computation for points and lines
Line.pyramidPrecomputation: 0

# max distance for stereo lines 
Line.Stereo.maxDist: 10

# mu weight for endpoint-endpoint dist in line 3D dist
Line.muWeightForLine3dDist: 0.5

# for using LSD extractor (much slower) instead of EDLine lines extractor
Line.LSD.on: 0

#--------------------------------------------------------------------------------------------
# Sparse Mapping
#--------------------------------------------------------------------------------------------

SparseMapping.filename: "sparse_map_euroc_stereoi.atlas"
# use saved map on start: 1 is ON, 0 is OFF 
SparseMapping.reuseMap: 1 
# freeze map during optimizations: 1 is ON, 0 is OFF  
SparseMapping.freezeMap: 0
# save map on shutdown: 1 is ON, 0 is OFF
SparseMapping.saveMap: 0 
# force immediate relocalization (or wait for loop-closing thread for relocalization): 1 is ON, 0 is OFF
SparseMapping.forceRelocalization: 1

#--------------------------------------------------------------------------------------------
# Stereo Dense
#--------------------------------------------------------------------------------------------

# StereoDense.type: libelas, libsgm, opencv, opencvcuda(this needs tuning and improvements) 
# (library used in combination with volumetric mapping to compute depth from stereo images)
StereoDense.type: "libelas"

#--------------------------------------------------------------------------------------------
# PointCloud Mapping
#--------------------------------------------------------------------------------------------

# PointCloudMapping.on: 1 is ON, 0 is OFF
PointCloudMapping.on: 1

#PointCloudMapping.type: voxelgrid, octomap, octree_point, chisel, fastfusion, voxblox
# NOTE: chisel and fastfusion require rectified images if you do not use pointcloud generation 
PointCloudMapping.type: "voxblox"

PointCloudMapping.resolution: 0.02
PointCloudMapping.numKeyframesToQueueBeforeProcessing: 1
PointCloudMapping.downSampleStep: 2
PointCloudMapping.minDepth: 0.2
PointCloudMapping.maxDepth: 10
PointCloudMapping.removeUnstablePoints: 1
PointCloudMapping.resetOnSparseMapChange: 1
PointCloudMapping.cloudDeformationOnSparseMapChange: 0

# [octree_point] specific params
PointCloudMapping.pointCounterThreshold: 3

# [octree_point, chisel, voxblox] specific params 
# PointCloudMapping.useCarving: 1 is ON, 0 is OFF
PointCloudMapping.useCarving: 1

# depth filtering 
PointCloudMapping.filterDepth.on: 0
PointCloudMapping.filterDepth.diameter: 7
PointCloudMapping.filterDepth.sigmaDepth: 0.02
PointCloudMapping.filterDepth.sigmaSpace: 5


